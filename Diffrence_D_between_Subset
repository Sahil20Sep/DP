#include <bits/stdc++.h> 
const int mod = 1e9 + 7;

int func(int i, int target, vector<int> &v, vector<vector<int>> &dp){
    if(i == 0){
        if(target == 0 && v[0] == 0){
            return 2;
        }
        if(target == 0 || v[0] == target){
            return 1;
        }
        return 0;
    }
    if(dp[i][target] != -1){
        return dp[i][target];
    }
    int ans = 0;
    ans = (ans + func(i - 1, target, v, dp)) % mod;
    if(target - v[i] >= 0){
        ans = (ans + func(i - 1, target - v[i], v, dp)) % mod;
    }
    return dp[i][target] = ans;
}

int countPartitions(int n, int d, vector<int> &arr) {
    int sum = 0;
    for(int i = 0; i < n; i++){
        sum += arr[i];
    }
    if((sum - d) < 0){
        return 0;
    }
    int cnt = count(arr.begin(), arr.end(), 0);
    vector<vector<int>> dp(n, vector<int> ((sum - d) / 2 + 1, -1));
    if(sum & 1){
        if(d & 1){
            return func(n - 1, (sum - d) / 2, arr, dp);
        }else{
            return 0;
        }
    }else{
        if(d & 1){
            return 0;
        }else{
            return func(n - 1, (sum - d) / 2, arr, dp);
        }
    }
}

---------------------------------------------------------------------------------

#include <bits/stdc++.h> 
const int mod = 1e9 + 7;

int func(int i, int target, vector<int> &v, vector<vector<int>> &dp){
    if(i == 0){
        if(target == 0 && v[0] == 0){
            return 2;
        }
        if(target == 0 || v[0] == target){
            return 1;
        }
        return 0;
    }
    if(dp[i][target] != -1){
        return dp[i][target];
    }
    int ans = 0;
    ans = (ans + func(i - 1, target, v, dp)) % mod;
    if(target - v[i] >= 0){
        ans = (ans + func(i - 1, target - v[i], v, dp)) % mod;
    }
    return dp[i][target] = ans;
}

int countPartitions(int n, int d, vector<int> &arr) {
    int sum = 0;
    for(int i = 0; i < n; i++){
        sum += arr[i];
    }
    if((sum - d) < 0){
        return 0;
    }
    int cnt = count(arr.begin(), arr.end(), 0);
    vector<vector<int>> dp(n, vector<int> ((sum - d) / 2 + 1, -1));
    if(sum & 1){
        if(d & 1){
            return func(n - 1, (sum - d) / 2, arr, dp);
            // int s = (1 << cnt) % mod;
            // return (ans * s) % mod;
            // return ans;
        }else{
            return 0;
        }
    }else{
        if(d & 1){
            return 0;
        }else{
            return func(n - 1, (sum - d) / 2, arr, dp);
            // int s = (1 << cnt) % mod;
            // return (ans * s) % mod;    \
            // return ans;
        }
    }
}

----------------------------------------------------------------------------------

        (same problem by given problem is + - + - + -)
        assignnt this and say how many ways to archive the target)


