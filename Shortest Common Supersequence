#include <bits/stdc++.h> 

int func(int i, int j, string &s, string &t, vector<vector<int>> &dp) {
    if(i < 0 || j < 0){
      return 0;
    }
    if(dp[i][j] != -1){
      return dp[i][j];
    }
    if(s[i] == t[j]){
      return dp[i][j] = 1 + func(i - 1, j - 1, s, t, dp);
    }
    return dp[i][j] = max(func(i - 1, j, s, t, dp), func(i, j - 1, s, t, dp));
}

string shortestSupersequence(string s, string t)
{
	int n = s.size(), m = t.size();
	vector<vector<int>> dp(n, vector<int> (m, -1));
	func(n - 1, m - 1, s, t, dp);
	int i = n - 1, j = m - 1;
	string f = "";
	while(i >= 0 && j >= 0){
		if(s[i] == t[j]){
			f.push_back(s[i]);
			i--; j--;
		}else{
			if(i == 0){
				f.push_back(t[j]);
				j--;
				continue;
			}
			if(j == 0){
				f.push_back(s[i]);
				i--;
				continue;
			}
			if(dp[i - 1][j] < dp[i][j - 1]){
				f.push_back(t[j]);
				j--;
			}else{
				f.push_back(s[i]);
				i--;
			}
		}
	}
	while(i >= 0){
		f.push_back(s[i]);
		i--;
	}
	while(j >= 0){
		f.push_back(t[j]);
		j--;
	}
	reverse(f.begin(), f.end());
	return f;
}
