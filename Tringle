#include <bits/stdc++.h> 

int func(int row, int end, vector<vector<int>> &t, vector<vector<int>> &dp){
	if(end > row){
		return (1e9 + 1);
	}
	if(row == 0){
		return t[0][0];
	}
	if(dp[row][end] != -1){
		return dp[row][end];
	}
	int ans = INT_MAX;
	if(row - 1 >= 0 && end - 1 >= 0){
		ans = min(ans, func(row - 1, end - 1, t, dp) + t[row][end]);
	}
	if(row - 1 >= 0 && end >= 0){
		ans = min(ans, func(row - 1, end, t, dp) + t[row][end]);
	}
	return dp[row][end] = ans;
}

int minimumPathSum(vector<vector<int>>& t, int n){
	vector<vector<int>> dp(n, vector<int> (n, -1));
	int ans = INT_MAX;
	for(int i = 0; i < n; i++){
		ans = min(ans, func(n - 1, i, t, dp));
	}
	return ans;
}
