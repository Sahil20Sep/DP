it can be consecutive or not consecutive but maintain the order.


#include <bits/stdc++.h>

int func(int i, int j, string &s, string &t, vector<vector<int>> &dp) {
    if(i < 0 || j < 0){
      return 0;
    }
    if(dp[i][j] != -1){
      return dp[i][j];
    }
    int ans = 0;
    if(s[i] == t[j]){
      ans = max(ans, 1 + func(i - 1, j - 1, s, t, dp));
    }else{
      ans = max(ans, max(func(i - 1, j, s, t, dp), func(i, j - 1, s, t, dp)));
    }
    return dp[i][j] = ans;
}

int getLengthOfLCS(string & str1, string & str2) {
    int n = str1.size(), m = str2.size();
    vector<vector<int>> dp(n, vector<int> (m, -1));
    return func(n - 1, m - 1, str1, str2, dp);
}

------------------------------------------------------------------------------------------

int i = n - 1, j = m - 1;
        string final = "";
        while(i >= 0 && j >= 0){
            if(s[i] == t[j]){
                final.pb(s[i]);
                // c(final);
                i--; j--;
            }else{
                if(i == 0){
                    j--; continue;
                }
                if(j == 0){
                    i--; continue;
                }
                if(dp[i - 1][j] < dp[i][j - 1]){
                    j--;
                }else{
                    i--;
                }
            }
        }
        reverse(all(final));
        cout << final << endl;
