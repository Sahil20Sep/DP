
bool func(int i, int target, vector<int> &v, vector<vector<int>> &dp){
	if(target == 0){
		return true;
	}
	if(i < 0){
		return false;
	}
	if(dp[i][target] != -1){
		return dp[i][target];
	}
	bool ans = false;
	ans |= func(i - 1, target, v, dp);
	if(target - v[i] >= 0){
		ans |= func(i - 1, target - v[i], v, dp);
	}
	return dp[i][target] = ans;
}

bool canPartition(vector<int> &v, int n)
{
	int sum = 0;
	for(int i = 0; i < n; i++){
		sum += v[i];
	}
	if(sum & 1){
		return false;
	}
	vector<vector<int>> dp(n, vector<int> ((sum >> 1) + 1, -1));
	return func(n - 1, (sum >> 1), v, dp);
}
