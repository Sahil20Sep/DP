1.

#include <bits/stdc++.h> 
int maximumProfit(vector<int> &v){
    vector<int> mn(v.size());
    int ans = INT_MIN;
    mn[0] = v[0];
    for(int i = 1; i < v.size(); i++){
        mn[i] = min(mn[i - 1], v[i]);
        ans = max(ans, v[i] - mn[i]);
    }
    return ans;
}

#include <bits/stdc++.h> 
int maximumProfit(vector<int> &v){
    int mn = v[0];
    int ans = INT_MIN;
    for(int i = 1; i < v.size(); i++){
        mn = min(mn, v[i]);
        ans = max(ans, v[i] - mn);
    }
    return ans;
}

--------------------------------------------------------------------------------

                (II)

#include <bits/stdc++.h>
int func(int i, int choose, long *value, vector<vector<int>> &dp, int n){
    if(i == n){
        return 0;
    }
    if(dp[i][choose] != -1){
        return dp[i][choose];
    }
    if(choose){
        return dp[i][choose] = max((long)func(i + 1, 1, value, dp, n), (long)func(i + 1, 0, value, dp, n) - value[i]);
    }else{
        return dp[i][choose] = max((long)func(i + 1, 0, value, dp, n), (long)func(i + 1, 1, value, dp, n) + value[i]);
    }
}

long getMaximumProfit(long *value, int n)
{
    vector<vector<int>> dp(n, vector<int> (2, -1));
    return func(0, 1, value, dp, n);
}
