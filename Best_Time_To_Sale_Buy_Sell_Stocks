1.

#include <bits/stdc++.h> 
int maximumProfit(vector<int> &v){
    vector<int> mn(v.size());
    int ans = INT_MIN;
    mn[0] = v[0];
    for(int i = 1; i < v.size(); i++){
        mn[i] = min(mn[i - 1], v[i]);
        ans = max(ans, v[i] - mn[i]);
    }
    return ans;
}

#include <bits/stdc++.h> 
int maximumProfit(vector<int> &v){
    int mn = v[0];
    int ans = INT_MIN;
    for(int i = 1; i < v.size(); i++){
        mn = min(mn, v[i]);
        ans = max(ans, v[i] - mn);
    }
    return ans;
}

--------------------------------------------------------------------------------

                (II)

#include <bits/stdc++.h>
int func(int i, int choose, long *value, vector<vector<int>> &dp, int n){
    if(i == n){
        return 0;
    }
    if(dp[i][choose] != -1){
        return dp[i][choose];
    }
    if(choose){
        return dp[i][choose] = max((long)func(i + 1, 1, value, dp, n), (long)func(i + 1, 0, value, dp, n) - value[i]);
    }else{
        return dp[i][choose] = max((long)func(i + 1, 0, value, dp, n), (long)func(i + 1, 1, value, dp, n) + value[i]);
    }
}

long getMaximumProfit(long *value, int n)
{
    vector<vector<int>> dp(n, vector<int> (2, -1));
    return func(0, 1, value, dp, n);
}


----------------------------------------------------------------------------------

                (II)

#include <bits/stdc++.h>
int func(int i, int choose, int have, vector<int> &value, vector<vector<vector<int>>> &dp, int n){
    if(i == n || have >= 2){
        return 0;
    }
    if(dp[i][choose][have] != -1){
        return dp[i][choose][have];
    }
    if(choose){
        return dp[i][choose][have] = max(func(i + 1, 1, have, value, dp, n), func(i + 1, 0, have, value, dp, n) - value[i]);
    }else{
        return dp[i][choose][have] = max(func(i + 1, 0, have, value, dp, n), func(i + 1, 1, have + 1, value, dp, n) + value[i]);
    }
}

int maxProfit(vector<int>& prices, int n)
{
    vector<vector<vector<int>>> dp(n, vector<vector<int>> (2, vector<int> (3, -1)));
    return func(0, 1, 0, prices, dp, n);
}

-----------------------------------------------------------------------------------

#include <bits/stdc++.h>
int func(int i, int choose, int have, vector<int> &value, vector<vector<vector<int>>> &dp, int n, int k){
    if(i == n || have >= k){
        return 0;
    }
    if(dp[i][choose][have] != -1){
        return dp[i][choose][have];
    }
    if(choose){
        return dp[i][choose][have] = max(func(i + 1, 1, have, value, dp, n, k), func(i + 1, 0, have, value, dp, n, k) - value[i]);
    }else{
        return dp[i][choose][have] = max(func(i + 1, 0, have, value, dp, n, k), func(i + 1, 1, have + 1, value, dp, n, k) + value[i]);
    }
}

int maximumProfit(vector<int> &prices, int n, int k)
{
    vector<vector<vector<int>>> dp(n, vector<vector<int>> (2, vector<int> (k + 1, -1)));
    return func(0, 1, 0, prices, dp, n, k);
}

----------------------------------------------------------------------------------------

#include <bits/stdc++.h> 

int func(int i, int choose, vector<int> &value, vector<vector<int>> &dp, int n){
    if(i >= n){
        return 0;
    }
    if(dp[i][choose] != -1){
        return dp[i][choose];
    }
    if(choose){
        return dp[i][choose] = max(func(i + 1, 1, value, dp, n), func(i + 1, 0, value, dp, n) - value[i]);
    }else{
        return dp[i][choose] = max(func(i + 1, 0, value, dp, n), func(i + 2, 1, value, dp, n) + value[i]);
    }
}

int stockProfit(vector<int> &value){
    int n = value.size();
    vector<vector<int>> dp(n, vector<int> (2, -1));
    return func(0, 1, value, dp, n);
}

------------------------------------------------------------------------------------------

#include <bits/stdc++.h> 

int func(int i, int choose, vector<int> &value, vector<vector<int>> &dp, int n,int fee){
    if(i == n){
        return 0;
    }
    if(dp[i][choose] != -1){
        return dp[i][choose];
    }
    if(choose){
        return dp[i][choose] = max(func(i + 1, 1, value, dp, n, fee), func(i + 1, 0, value, dp, n, fee) - value[i]);
    }else{
        return dp[i][choose] = max(func(i + 1, 0, value, dp, n, fee), func(i + 1, 1, value, dp, n, fee) + value[i] - fee);
    }
}

int maximumProfit(int n, int fee, vector<int> &value) {
    vector<vector<int>> dp(n, vector<int> (2, -1));
    return func(0, 1, value, dp, n, fee);
}
