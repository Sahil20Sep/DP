#include <bits/stdc++.h>

int func(int i, vector<int> &dp, vector<int> &nums){
    if(i < 0){
        return 0;
    }
    if(dp[i] != -1){
        return dp[i];
    }
    int ans = func(i - 1, dp, nums);
    ans = max(ans, func(i - 2, dp, nums) + nums[i]);
    // cout << i << ' ' << ans << endl;
    return dp[i] = ans;
}

int maximumNonAdjacentSum(vector<int> &nums){
    vector<int> dp(nums.size(), -1);
    return func(nums.size() - 1, dp, nums);
}

----------------------------------------------------------------------------

#include <bits/stdc++.h>

int maximumNonAdjacentSum(vector<int> &nums){
    vector<int> dp(nums.size());
    dp[0] = nums[0];
    dp[1] = max(nums[0], nums[1]);
    for(int i = 2; i < nums.size(); i++){
        dp[i] = dp[i - 1];
        dp[i] = max(dp[i], dp[i - 2] + nums[i]);
    }
    return dp[nums.size() - 1];
}

---------------------------------------------------------------------------

#circluar

#include <bits/stdc++.h> 

int func(int i, vector<int> &dp, vector<int> &nums){
    if(i < 0){
        return 0;
    }
    if(dp[i] != -1){
        return dp[i];
    }
    int ans = func(i - 1, dp, nums);
    ans = max(ans, func(i - 2, dp, nums) + nums[i]);
    // cout << i << ' ' << ans << endl;
    return dp[i] = ans;
}

int houseRobber(vector<int>& v)
{
    if(v.size() == 1){
        return v[0];
    }
    vector<int> dp1(v.size(), -1);
    vector<int> dp2(v.size(), -1);
    vector<int> one, two;
    for(int i = 0; i < v.size() - 1; i++){
        one.push_back(v[i]);
    }
    for(int i = 1; i < v.size(); i++){
        two.push_back(v[i]);
    }
    int a = func(one.size() - 1, dp1, one);
    // cout << a << endl;
    int b = func(two.size() - 1, dp2, two);
    // cout << b << endl;
    return max(a, b);
}
